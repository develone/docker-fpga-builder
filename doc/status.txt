Background:
The cross compiling of yosys tools.  Should not have been my goal with docker or yocto.
Since, a project catzip, for instance has 10 or more bin files that need to be created.
A docker image, which has the yocto tools built, could be used to create the 10 or more bin files in separate containers.  

The toolbelt is a utility to run tools for testing and building of software modules. 
The tools are run in an dockerized environment where toolchains and frameworks are 
installed, and thus removes the need to install compilers and so on on your local system.

These are the repos "https://github.com/develone/docker-fpga-builder" and
"https://github.com/bitcraze/toolbelt"

As of 01/15/20
The steps below were used to install docker on Ubuntu AMD x86_64 system.
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt-get update
apt-cache policy docker-ce
sudo apt-get install -y docker-ce

sudo systemctl status docker

sudo usermod -aG docker ${USER}

Created a Docker image on Ubuntu AMD x86_64 system.
Client: Docker Engine - Community
 Version:           19.03.5
 API version:       1.40
 Go version:        go1.12.12
 Git commit:        633a0ea838
 Built:             Wed Nov 13 07:50:12 2019
 OS/Arch:           linux/amd64
 Experimental:      false

Server: Docker Engine - Community
 Engine:
  Version:          19.03.5
  API version:      1.40 (minimum version 1.12)
  Go version:       go1.12.12
  Git commit:       633a0ea838
  Built:            Wed Nov 13 07:48:43 2019
  OS/Arch:          linux/amd64
  Experimental:     false
 containerd:
  Version:          1.2.10
  GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339
 runc:
  Version:          1.0.0-rc8+dev
  GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657
 docker-init:
  Version:          0.18.0
  GitCommit:        fec3683

git clone https://github.com/develone/docker-fpga-builder.git
cd docker-fpga-builder/src
./build.sh
Run the image in a container. The container has a ubuntu system 
with the software installed from the Dockerfile
which in this case 395 packages plus yosyse, icestorm, and nextpnr.

vidal@ws009:~/docker-fpga-builder/src$ docker run --rm -it docker-fpga-builder:latest

Testing nextpnr, icepack, and icetime.
git clone https://github.com/develone/catzip.git

catzip Now has 2 scripts build-bin.sh & build-catzip-bin.sh, which are used to create

cd catzip

time ./build-bin.sh
real	0m33.406s
user	0m17.268s
sys	0m0.752s

time ./build-catzip-bin.sh
real	5m21.430s
user	5m20.456s
sys	0m0.720s

ls bin-files/
blinky.bin  build-catzip.log  build.log  catzip.bin  clktest.bin  dimmer.bin  leddigits.bin  switch_leds.bi

scp -r bin-files devel@192.168.1.69:~/testbuilds/catzip/

devel@mypi3-16:~/testbuilds/catzip/sw/host $ sudo config_cat ../../bin-files/catzip.bin 

GPIO 25 not exported, trying to export...
GPIO 17 not exported, trying to export...
GPIO 22 not exported, trying to export...

OK: SPI driver loaded

Setting GPIO directions
out
out
in
Setting output to low
0
Reseting FPGA
0
1
Checking DONE pin
0
Continuing with configuration procedure
263+1 records in
263+1 records out
135100 bytes (135 kB, 132 KiB) copied, 0.0215155 s, 6.3 MB/s
Setting output to high
1
Checking DONE pin
1

devel@mypi3-16:~/testbuilds/catzip/sw/host $ ./arm-netpport 
Listening on port 8363
Listening on port 8364

devel@mypi3-16:~/testbuilds/catzip/sw/host $ ./arm-wbregs version
00800010 ( VERSION) : [....] 20200115

devel@mypi3-16:~/testbuilds/catzip/sw/host $ ./runjpeg.sh

devel@mypi3-16:~/testbuilds/catzip/sw/host $ octave

https://bobcares.com/blog/move-docker-container-to-another-host/
 
On Ubuntu ws009

docker save docker-fpga-builder:1.0 > docker-fpga-docker.tar

md5sum docker-fpga-docker.tar 
d26a0e272cf03acb4d9a428e85440f5e  docker-fpga-docker.tar

Transferred the docker-fpga-builder.tar to a Fedora 30 laptop 

Create a docker image on Fedora 30 from a tar file.

cat docker-fpga-docker.tar | docker load

 
